@CommentBox = React.createClass(
  mixins: [Backbone.React.Component.mixin]

  handleCommentSubmit: (comment_hash) ->
    # Optimistically set an id on the new comment. It will be replaced by an
    # id generated by the server. In a production application you would likely
    # not use Date.now() for this and would have a more robust system in place.
    @getCollection().create comment_hash, 
      success: ((data) ->
        # this.setState({comments: comments.concat([data])}); # If you want to use it without pusher
      ).bind(this)
      error: ((xhr, status, err) ->
        console.error @props.url, status, err.toString()
      ).bind(this)
  componentWillMount: ->
    @pusher = new Pusher('e0a2fd2c6a944554cb8d', encrypted: true)
    @chatRoom = @pusher.subscribe('comment')
    notify.requestPermission()
    comments = new MyApp.Collections.Comments
    comments.reset(JSON.parse(@props.comments))
    @onCollection @, comments
  componentWillUnmoun: -> 
    @off(@)
  componentDidMount: ->
    @chatRoom.bind 'new_comment', ((data) ->
      new_comment = new MyApp.Models.Comment(data)
      @getCollection().add(new_comment, merge: true )
      if notify.permissionLevel() == notify.PERMISSION_GRANTED
        notify.createNotification data.author,
          body: data.text
          icon: 'images/chat.ico'
    ), this
        
  render: ->
    `<div className="commentBox">
        <h1>Comments</h1>
        <CommentList collection={this.getCollection()} />
        <CommentForm onCommentSubmit={this.handleCommentSubmit} />
      </div>`
)