@CommentBox = React.createClass(
  handleCommentSubmit: (comment) ->
    comments = @state.comments
    # Optimistically set an id on the new comment. It will be replaced by an
    # id generated by the server. In a production application you would likely
    # not use Date.now() for this and would have a more robust system in place.
    comment.id = Date.now()
    newComments = comments.concat([ comment ])
    $.ajax
      url: @props.url
      dataType: 'json'
      type: 'POST'
      data: comment: comment
      success: ((data) ->
        # this.setState({comments: comments.concat([data])}); # If you want to use it without pusher
        return
      ).bind(this)
      error: ((xhr, status, err) ->
        @setState comments: comments
        console.error @props.url, status, err.toString()
        return
      ).bind(this)
    return
  componentWillMount: ->
    @pusher = new Pusher('e0a2fd2c6a944554cb8d', encrypted: true)
    @chatRoom = @pusher.subscribe('comment')
    notify.requestPermission()
    return
  componentDidMount: ->
    @chatRoom.bind 'new_comment', ((data) ->
      comments = @state.comments
      @setState comments: comments.concat([ data ])
      if notify.permissionLevel() == notify.PERMISSION_GRANTED
        notify.createNotification data.author,
          body: data.text
          icon: 'images/chat.ico'
      return
    ), this
    return
  getInitialState: ->
    { comments: JSON.parse(@props.comments) }
  render: ->
    `<div className="commentBox">
        <h1>Comments</h1>
        <CommentList comments={this.state.comments} />
        <CommentForm onCommentSubmit={this.handleCommentSubmit} />
      </div>`
)