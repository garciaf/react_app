var CommentBox = React.createClass({
  handleCommentSubmit: function(comment) {
    var comments = this.state.comments;
    // Optimistically set an id on the new comment. It will be replaced by an
    // id generated by the server. In a production application you would likely
    // not use Date.now() for this and would have a more robust system in place.
    comment.id = Date.now();
    var newComments = comments.concat([comment]);
    $.ajax({
      url: this.props.url,
      dataType: 'json',
      type: 'POST',
      data: { comment: comment },
      success: function(data) {
        this.setState({comments: data});
      }.bind(this),
      error: function(xhr, status, err) {
        this.setState({comments: comments});
        console.error(this.props.url, status, err.toString());
      }.bind(this)
    });
  },
  componentWillMount: function() {
    this.pusher = new Pusher('e0a2fd2c6a944554cb8d', { encrypted: true});
    this.chatRoom = this.pusher.subscribe('comment');
  },
  componentDidMount: function() {
    this.chatRoom.bind('new_comment', function(data){
      this.setState({comments: data })
    }, this);
  },
  getInitialState: function() {
    return {comments: JSON.parse(this.props.comments)};
  },
  
  render: function() {
    return (
      <div className="commentBox">
        <h1>Comments</h1>
        <CommentList comments={this.state.comments} />
        <CommentForm onCommentSubmit={this.handleCommentSubmit} />
      </div>
    );
  }
});
